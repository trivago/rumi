#!/usr/bin/env php
<?php
// application.php
set_time_limit(0);

require __DIR__.'/vendor/autoload.php';

use Symfony\Component\Config\FileLocator;
use Symfony\Component\Console\Application;
use jakubsacha\Rumi\Commands\RunCommand;
use jakubsacha\Rumi\Commands\CheckoutCommand;
use jakubsacha\Rumi\Commands\CacheStoreCommand;
use jakubsacha\Rumi\Commands\CacheRestoreCommand;
use Symfony\Component\DependencyInjection\ContainerBuilder;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Loader\XmlFileLoader;
use Symfony\Component\EventDispatcher\EventDispatcher;
use Symfony\Component\EventDispatcher\EventDispatcherInterface;

$container = prepareContainer();
$eventDispatcher = new EventDispatcher();
$application = new Application();

loadPlugins($application, $container, $eventDispatcher);

$oRunCommand = new RunCommand($container, $eventDispatcher);
$application->add($oRunCommand);
$application->add(new CheckoutCommand($container));
$application->add(new CacheStoreCommand($container));
$application->add(new CacheRestoreCommand($container));
$application->setDefaultCommand($oRunCommand->getName());
$application->run();

/**
 * @return ContainerBuilder
 */
function prepareContainer()
{
    $container = new ContainerBuilder();
    $loader = new XmlFileLoader($container, new FileLocator(__DIR__));
    $loader->load('config/services.xml');

    return $container;
}


function loadPlugins(Application $application,
                     ContainerInterface $container,
                     EventDispatcherInterface $eventDispatcher)
{
    // init plugins here

}